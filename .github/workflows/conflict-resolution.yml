name: Conflict Resolution Helper

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

jobs:
  detect-conflicts:
    runs-on: ubuntu-latest
    name: Detect and Help Resolve Conflicts
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Setup Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    
    - name: Check for conflicts with main
      id: conflict-check
      run: |
        git fetch origin main
        
        # Try to merge main into the current branch
        if ! git merge origin/main --no-commit --no-ff; then
          echo "conflicts=true" >> $GITHUB_OUTPUT
          echo "## Merge Conflicts Detected! ðŸš¨" > conflict_report.md
          echo "" >> conflict_report.md
          echo "The following files have conflicts that need to be resolved:" >> conflict_report.md
          echo "" >> conflict_report.md
          
          # List conflicted files
          git status --porcelain | grep "^UU\|^AA\|^DD" | while read status file; do
            echo "- \`$file\`" >> conflict_report.md
          done
          
          echo "" >> conflict_report.md
          echo "### How to resolve conflicts:" >> conflict_report.md
          echo "1. Pull the latest changes from main branch" >> conflict_report.md
          echo "2. Merge main into your branch: \`git merge main\`" >> conflict_report.md
          echo "3. Open conflicted files and resolve the conflicts manually" >> conflict_report.md
          echo "4. Remove conflict markers (\`<<<<<<<\`, \`=======\`, \`>>>>>>>\`)" >> conflict_report.md
          echo "5. Stage the resolved files: \`git add <filename>\`" >> conflict_report.md
          echo "6. Complete the merge: \`git commit\`" >> conflict_report.md
          echo "7. Push your changes: \`git push\`" >> conflict_report.md
          echo "" >> conflict_report.md
          echo "### Need help?" >> conflict_report.md
          echo "- Review the [Conflict Resolution Guide](../blob/main/CONFLICT_RESOLUTION.md)" >> conflict_report.md
          echo "- Ask for help in the PR comments" >> conflict_report.md
          
          git merge --abort
        else
          echo "conflicts=false" >> $GITHUB_OUTPUT
          git merge --abort 2>/dev/null || true
        fi
    
    - name: Comment on PR if conflicts found
      if: steps.conflict-check.outputs.conflicts == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const conflictReport = fs.readFileSync('conflict_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: conflictReport
          });
    
    - name: Add conflict label
      if: steps.conflict-check.outputs.conflicts == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['merge-conflicts']
          });
    
    - name: Remove conflict label if resolved
      if: steps.conflict-check.outputs.conflicts == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'merge-conflicts'
            });
          } catch (error) {
            // Label might not exist, ignore the error
            console.log('Conflict label not found or already removed');
          }
